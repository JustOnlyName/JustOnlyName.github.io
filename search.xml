<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[imagetest]]></title>
    <url>%2F2019%2F03%2F08%2Fimagetest%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[edu.aqniu笔记]]></title>
    <url>%2F2019%2F02%2F18%2Faqniu_CTF%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[安全牛的课程演示记录 1. sql宽字节注入url转码 空格 %20 ‘ %27 # %23 \ %5C 利用MySQL的一个特性，MySQL使用GBK编码的时候，会认为两个字符时一个汉字（前一个ascii码要大于128，才到汉字的范围） &emsp;’ &emsp;-&gt; &emsp;&emsp;\’&emsp;&emsp; -&gt; %5C%27%df ‘ -&gt; &emsp;%df\’ &emsp; -&gt; %df%5C%27此处的单引号变为%27逃逸 基于约束的sql攻击2. kali 持久加密USB安装 将kali镜像iso文件复制到虚拟机当中（通过共享文件夹从物理主机传到虚拟机） 插入U盘 命令 dmesg 显示U盘类型【sdb】系统写入的日志 1. 将镜像文件刻录到U盘，制作usb的live启动盘2. 划分剩余分区，用于后续加密 dd if=kali-linux-...-amd64.iso of=/dev/sdb(此处的sdb是根据所插入的存储设备的类型） bs=1M parted命令行磁盘分区 print devices显示现在挂载的硬盘 select /dev/sdb选中磁盘在此操作 mkpart primary ** **手动进行分区 3. 使用luks对分区进行加密 luks加密分前端和后端加密 cryptsetup --verbose --verify-passphrase luksFormat /dev/sdb3(u盘中的第3分区） cryptsetup luksOpen /dev/sdb3 usb(需要给一个挂载的名称，会在/dev/mapper/usb生成文件)打开加密的分区来进行写入 ls /dev/mapper/usb mkfs ext3(ext4) /dev/mapper/usb格式化磁盘分区 e2label /dev/mapper/usb persistence设置卷标（必须用persistence） mkdir /mnt/usb/新创建一个目录 mount /dev/mapper/usb /mnt/usb相当于连接目录 echo &quot;/ union&quot; &gt; /mnt/usb/persistence.conf umount /dev/mapper/usb将挂载的文件卸载掉 cryptsetup luksClose /dev/mapper/usb完成持久加密的usb 3. 熟悉Linux环境 gnome-tweak-tool字体调整，在terminal界面命令行 clear将命令行界面清空 apt-get install netspeed网络流量监视，1.安装包……2.添加到工具栏，点alt键在工具栏一行点右键，添加到面板 apt-get命令 安装官方软件常用命令 4. 熟悉BASH命令 ls、cd、pwd、cat、more、tail、cp、rm、top、ps、grep、ifconfig、netstat、awk、sort、route、mount、dmesg、find、whereis、echo、vi 命令使用方式可见Linux 命令大全 添加内容tail命令常与watch命令同时使用 DoS攻击拒绝服务攻击：针对服务器展开的攻击。目的是让服务器无法继续提供服务。 手段是恶意占用服务器提供的服务，使服务资源衰竭，无法继续为其他人提供服务。 占用服务的办法：几条途径：TCP（传输层面向连接的协议）、UDP、ICMP SYN洪水（很多，这个东西很多发给他，属于TCP层面的攻击） 漏洞：三次握手的漏洞。 男女朋友之间，一个发起消息，另一个把TA晾在那 一次可能很短时间，但很多次请求消息可能时间就很长 服务器多次发送syn请求，但不回复，导致服务器资源耗光 疑问：客户端先耗光资源，而服务器能力仍充足 延伸：DDOS攻击，第一个D意思是分布式计算机，也就是控制多台电脑（肉机），让大家同时发送，就好比许多弱小的人，同时来攻击一个巨人。 land攻击 建立在tcp基础上的攻击。利用握手机制。 过程：客户端伪造一个tcp握手包，发送给服务器。该握手包的源IP地址被伪造为服务器的IP地址。服务器收到包后，向自己发送一个握手确认包，重点是服务器自己又回复了一个确认包，这样完成了三次握手。建立了一个完全没有意义的链接。 UDP攻击 常见的一个攻击是利用服务器的两个服务，CHARGEN和echo服务。前者为客户端提供一些随机的字符，后者能够完全将客户端发给他的字符发送回来。 漏洞分析： 无穷无尽之间的发送 死亡之ping Ping通常用来诊断网络是否导通，主机是否可访问。他的缺陷是一个ping的数据包通常小于64K 做法：发送一个大约于64K的数据包，导致对方以为内存出错，导致主机故障。 实现 网络编程&lt;libnet.h&gt;虚拟机Fedora wireshark]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo博客备份]]></title>
    <url>%2F2019%2F02%2F18%2FHexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD%2F</url>
    <content type="text"><![CDATA[&emsp;保存和备份很重要，所以随手保存和存有备份要成为我的习惯。使用Hexo在github搭建的博客，仓库里只有生成的静态网页文件，是没有Hexo的源文件的，如果现在这个电脑出现了什么问题，那就麻烦了。备份的教程和搭建的教程比起来简直是少的可怜，好不容易找到一份教程，使用npm install hexo-git-backup --save备份插件，却是安装不上，所以果断放弃，就在我准备自己再设一个repository用来放markdown文件时，看到了一份简单明了的教程，所以我需要把过程记录下来，以后忘了还可以有个参考]]></content>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[反编译测试]]></title>
    <url>%2F2019%2F01%2F30%2F%E5%8F%8D%E7%BC%96%E8%AF%91%E6%B5%8B%E8%AF%95%2F</url>
    <content type="text"><![CDATA[&emsp;最近无趣，看了看某软件install时出现的accept协议，不同意不让安装那个。提到一句“不允许解码、逆向工程、反汇编或删减本软件至人们可感知的形式（除非相关适用法律允许这样做）”下面了解了解反编译的知识 Java反编译 &emsp;我初步理解“编译”是指源代码转换成二进制执行代码的过程，比如将C源代码编译成.exe可执行文件；那么把二进制执行代码转换成源代码的过程就叫“反编译”,意思是将代码、汇编语言这些东西制作成应用程序这个过程的反过程，比如把exe转换为C源代码就叫“反编译”。 那就用一个与应用程序那种可视化界面最接近的我以前的Java程序来测试一下。 Java导出JAR file jar是什么，导出命名时发现，其与zip扩展名可互换，也就是一种包 export过程 是个很简单的程序 &emsp; &emsp; jar文件转为exe文件 &emsp;使用exe4j软件可以完成（下载界面介绍了解到install4j软件，记录下来以后可以尝试），也可以使用Jar2Exe应用程序。&emsp;操作流程见参考文档 Error&emsp; 1.&emsp; - 这是由于从eclipse中Export时操作错误导致。出现所需要的类没有在exe文件中，原因有1. Export时选择单个的主类文件，没有选择整个project导出，使用整个project导出则会将使用到的所有包都包含在内。2. 导出时没有选择JAR file，而是选择Runnable JAR file。2. &emsp; - 由于使用exe4j时操作失误导致。本机JVM为64bit，但打包成exe过程中选择的时32bit 注意 填写.jar包或jre路径时，使用relative path exe文件反编译重点过程 几个常用的Java源码类型的反编译软件或插件JD-GUI、XJad 原本以为是exe文件反编译为java文件，但操作之后是将exe文件运行时受支持的源jar文件反编译回java文件。 JD-GUI 此处可以了解一下C:\Users***\AppData\Local\Temp文件夹的作用 运行exe文件时，会有支持该exe文件运行的临时文件.jar文件生成，找到该.jar文件。运行JD-GUI应用程序，直接将”.jar”文件拖入进去即可查看里边的“.class”文件 可以反编译单个.class文件，右侧显示代码。 Unity3D反编译Builds\balls.exe 从同学那里捣鼓过来的，就来当个人的实验样本吧 反编译出来的文件放到RE文件夹里 使用Reflector 这个软件是.NET的，但是可以用到Unity的C#代码上，需要用到插件Reflector.FileDisassembler.dll下载地址：http://www.xdowns.com/soft/184/dll/2014/Soft_130597.html 把下载好的Reflector.FileDisassembler.dll文件放到软件根目录下的Addins文件夹中（哪里都可以） 添加插件添加后关闭窗口即可 上述准备工作完成，可以进行反编译测试了 Ctrl+O,打开文件,选择Unity程序对应的应用程序扩展，扩展名为.dll那些左侧有分析好的，代码部分在{}花括号里，将花括号里的文件反编译出来。 完成之后 注意在进行下一次反编译前，先Refresh软件，否则 file disassembler不可用 参考文档： eclipse 导出可运行jar包时三种Library handling的区别 exe4j安装及注册 使用exe4j将java项目打成exe执行程序 Java反编译工具使用对比，最好用的Java反编译工具 — JD-GUI、XJad 几种java反编译软件的安装以及使用总结 Unity3d 各种反编译]]></content>
      <tags>
        <tag>Decompile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fiddler使用入门到入土]]></title>
    <url>%2F2018%2F12%2F25%2FFiddler%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[Fiddler1.fiddler介绍介绍的话，抛一个链接到官网去看看吧https://www.telerik.com/fiddler 一个中文版本的Fiddlerhttps://bbs.125.la/forum.php?mod=viewthread&amp;tid=14106559 界面介绍 会话窗口 Result HTTP状态码 Protocol 请求使用的协议，如HTTP/HTTPS/FTP等 HOST 请求地址的主机名或域名 URL 请求资源的位置 Body 请求大小 Caching 请求的缓存过期时间或者缓存控制值 Content-Type 请求响应的类型 Process 发送此请求的进程ID Comments 备注 Custom 自定义值 Inspectors 抓包得到的数据在列表中显示，点击之后在右侧的Inspectors显示详细内容。 http request*statistics 各种请求时间、header、body之类的 *Inspectors（检查者）*Composer 将左侧请求拖到右侧，可更改登录信息，然后点击右上侧Excute *Filters show only Internte Hosts Run … Actions → now Flag the following Hosts Fiddler工作原理 &emsp;Fiddler的本质是一个局域网HTTP代理，即通过手动设置或自动设置，将局域网中的数据请求中转至软件内部的请求处理程序，再由Fiddler程序进行发送和接收请求，并解析至软件显示界面，同时将接受的请求结果返回给原始请求发送者。&emsp;使用的代理地址是：127.0.0.1，端口默认为8888，即默认监听127.0.0.1:8888。退出的时候它会自动注销代理，这样就不会影响别的程序。&emsp;Fiddler可以抓取支持http代理的任意程序的数据包，如果要抓取https会话需进行设置 Fiddler的工作流程 首先fiddler截获客户端浏览器发送给服务器的https请求,此时还未建立握手。 fiddler向服务器发送请求进行握手， 获取到服务器的CA证书， 用根证书公钥进行解密， 验证服务器数据签名， 获取到服务器CA证书公钥。 fiddler伪造自己的CA证书， 冒充服务器证书传递给客户端浏览器， 客户端浏览器做跟fiddler一样的事。 客户端浏览器生成https通信用的对称密钥， 用fiddler伪造的证书公钥加密后传递给服务器， 被fiddler截获。 fiddler将截获的密文用自己伪造证书的私钥解开， 获得https通信用的对称密钥。 fiddler将对称密钥用服务器证书公钥加密传递给服务器， 服务器用私钥解开后建立信任， 握手完成. 对称密钥加密消息，开始通信 fiddler接收到服务器发送的密文， 用对称密钥解开， 获得服务器发送的明文。再次加密， 发送给客户端浏览器。 客户端向服务器发送消息， 用对称密钥加密， 被fidller截获后， 解密获得明文 由于fiddler一直拥有通信用对称密钥， 所以在整个https通信过程中信息对其透明。 2. Fiddler的HTTP代理HTTP协议了解 超文本传输协议，基于请求与响应模式的、无状态的、应用层的协议 配置浏览器 Chorme、IE、FireFox Chorme、IE不需要做代理设置，FireFox需要手动更改,手动更改之后不再使用Fiddler时需恢复修改 端口设置端口一共有0~65535的范围，而在TCP/IP网络中，为各种公共服务保留的端口号范围是1~1023，其提出“协议端口”的概念，用于标识两个通信的进程。一般配置时使用1w+~6w+之间 配置fiddler允许监听到https fiddler默认只抓取http格式的 打开fiddler菜单Tools-&gt;Options-&gt;HTTPS ####### 其他具体内容见参考文档 ## 补充localhost，127.0.0.1 和 本机IP 三者的区别https://blog.csdn.net/hongxiaoshuang/article/details/52924527 https://blog.csdn.net/xiao_xing_yun/article/details/53412058 ##网页无法访问 如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。 解决方法结合Fiddler的工作原理，可能是Fiddler没有自动注销造成，所以修改 IE浏览器的默认代理即可完成。打开IE浏览器-&gt;设置选项中-&gt; 连接-&gt; 局域网设置-&gt; 代理服务器取消掉。 参考文档：https://www.cnblogs.com/miantest/p/7289694.html https://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/ConfigureBrowsers 给大家准备好刀了，一人一把，别抢 ！∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤ ∝╬▅▆▅▆▅▆▅▆▅▆▅▆▇◤拿好了，大家，上！！]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[更新博客搭建]]></title>
    <url>%2F2018%2F12%2F23%2F%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[更新博客搭建 &emsp;作为一名在hexo方面赤果果的新手，我在博文写作方面遇到了很多问题，故特意将这些错误及其解决方案记录下来，以便日后查证之用，同时，也可给各位在遇到类似问题时提供一点参考。俗话说的好，好记性不如烂键盘^.^ Theme—Next &emsp;这个主题会有两个不是一个路径下的config文件需要更改，一个是在hexo的blog的root目录下，一个是在之后下载来的theme相关路径下的config文件 第一个是在站点根目录下，其中包含Hexo的配置 第二个是在主题根目录下，由NexT提供并包含主题的配置 1. 下载NextTheme 进入hexo的blog文件夹 git clone https://github.com/theme-next/hexo-theme-next themes/next 此处可以不用clone，可以直接进入网址下载文件，再复制粘贴到指定文件夹下（个人感觉这样速度快一些） 2. 更改config文件 Ctrl+F查找theme，enable:true theme的大的外观时由scheme控制，可更换其他样式 3. 测试效果 这样就已经安装并使用了next主题，但并没有想其他人的网站博客那样的个性化，接下来进行一下更多设置。 发布一篇新文章首先Ctrl+C停止当前的本地服务，然后 hexo n “我的第一篇文章Test”这样就会在博客目录下source_posts中生成相应的“Test.md”文件，之后编辑markdown文件就行 至于为何会出现一个Test文件夹，里面目前还是空的，无法判断用处，之后再了解（注意事项4） 美化主题1. 添加Fork me on Github点击这里或者这里挑选自己喜欢的样式，并复制代码。 复制样式的代码，放在themes/next/layout/_layout.swig文件中(放在&lt;div class=&quot;headband&quot;&gt;&lt;/div&gt;的下面)，并把href改为你的github地址如图 效果 2. 在每篇文章末尾添加「致谢」 在路径\themes\next\layout\_macro中新建 passage-end-tag.swig 文件,并添加以下内容： &lt;div&gt; {% if not is_index %} ------------- 本文结束 感谢您的阅读 ------------- {% endif %} &lt;/div&gt; &ensp;2. 在post.swig文件中，post-footer 之前添加代码 &lt;div&gt; {% if not is_index %} {% include 'passage-end-tag.swig' %} {% endif %} &lt;/div&gt; &ensp;3. 在theme配置文件中启用passage_end_tag 3. 网站底部字数统计 博客根目录下$ npm install hexo-wordcount --save /themes/next/layout/_partials/footer.swig添加（位置可以换，调试调试就知道） &lt;div class=&quot;theme-info&quot;&gt; &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt; &lt;span class=&quot;post-count&quot;&gt;博客全站共{{ totalcount(site) }}字&lt;/span&gt; &lt;/div&gt; 也可以不需要设置这么多项目只安装插件，在theme/_comfig.yml中更改设置即可 4. 文章加密访问设置加密 打开themes-&gt;next-&gt;layout-&gt;_partials-&gt;head.swig文件，在以下位置插入这样一段代码 代码如下 &lt;script&gt; (function () { if (&apos;{{ page.password }}&apos;) { if (prompt(&apos;请输入文章密码&apos;) !== &apos;{{ page.password }}&apos;) { alert(&apos;密码错误！&apos;); if (history.length === 1) { location.replace(&quot;https://....&quot;); // 这里替换成你的首页 } else { history.back(); } } } })(); &lt;/script&gt; &ensp;2. 在需要加密的文档中添加password关键字，并设置value read more控制文章内容显示–博文显示缩略 只需在写的文档中添加&lt;!--more--&gt;即可在该断点处显示 5. 更改标签图标 感觉这个#不太美观，修改： /themes/next/layout/_macro/post.swig，搜索rel=&quot;tag&quot;&gt;#，将#换成&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt; 6. 添加动态小live抛一个链接，按照链接操作吧。（默认好像就是我现在界面的样子，目前没学会换图标） 设置博文置顶 个人觉得没什么必要（目前），所以就不进行设置 Hexo重装与位置移动 &emsp;最近想要将笔记本重新更新一下，把所有文件都删掉再重装，这也就可能出现我没有想到的问题，所以就先查找一下重装之后的blog在本地笔记本上的新设置之类的内容 1. 重装 &emsp;安装基本配置应用程序，Git，Node.js,Hexo&emsp;hexo init→npm install hexo-deployer-git -save(类似初始化创建blog一样)&emsp;更改站点配置文件最后的几项内容，之后只需要修改主题，美化之类的即可 注意如果需要原博文内容，可以先复制原博文内容，再重装，将博文内容粘贴到_post文件夹内（目前没实际操作过，应该如此） 2. 位置移动只要将Hexo环境配置好之后，将原本地blog文件夹整个复制，然后放到一个新文件夹路径下即可（安装新系统之前先复制一份） 个人遇到的需要注意的事情1. 有时美化后无法显示 &emsp;个人一般只在/localhost:4000/中调试，$ hexo s --debug，小的改动可以通过刷新显示，但大的改动（比如美化主题）刷新有可能无法显示，可以先生成$ hexo g再$ hexo s --debug 2. 安装插件时出bug 解决及解释：https://docs.npmjs.com/cli/audit npm audit fix：修复所安装插件遇到的漏洞 npm audit：查看还有什么漏洞未解决 3. error deployer not found:git 的报错在hexo d时出现 这是因为 hexo 3.0 不适配 hexo 2.0 的bug 执行: npm install hexo-deployer-git --save 即可 4. Hexo图片显示问题 使用Markdown应用程序upload图片功能不会出现问题 使用之前说到的hexo n &quot;Test&quot;生成.md时，同时生成的一个/Source/_post/Test文件夹 安装插件npm install https://github.com/CodeFalling/hexo-asset-image --save或npm install hexo-asset-image --save 按照upload图片格式![这里输入图片描述]( Test/图片名.jpg)引用图片 还是markdown程序自带upload图片功能方便 参考文档：http://theme-next.iissnan.com/getting-started.html Next美化：http://shenzekun.cn/hexo%E7%9A%84next%E4%B8%BB%E9%A2%98%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B.html 推荐10款Python IDEhttp://www.runoob.com/w3cnote/best-python-ide-for-developers.html]]></content>
      <tags>
        <tag>Hexo博客搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo+git博客搭建]]></title>
    <url>%2F2018%2F12%2F21%2Fhexo%2Bgit%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[欣赏了一些其他人的博客，并不是简单的仓库，遂由网上查找关于hexo搭建github博客的文档 Hexo官方：https://hexo.io/ Hexo官方(中文)：https://hexo.io/zh-cn/ hexo博客搭建hexo简介Hexo类似于一个个人网站，搭建出来的效果如同csdn、cnblog那样的界面，其拥有高效的博客搭建框架，将博客内网页完美渲染。 hexo是需要用npm命令，即需要下载安装node.js工具 Node.js官方网站：https://nodejs.org/en/ Node.js官方文档：https://nodejs.org/en/docs/ 点击安装，next、next就行 1. 安装Hexo npm install hexo-cli -g //使用该命令，在node.exe中进行，也可以在Git bash Here中进行 2. 创建blog文件夹 用于之后搭建网站 在本地创建wblog文件夹，进入文件夹，打开Git Bash 初始化一个hexo blog网站hexo init 3. 运行 npm install hexo server 4. 测试网页 打开网址，http://localhost:4000/就可以看到创建的blog 这里创建的blog只是在本地，并没有部署到Github上 5. 修改_config.yml配置文件 在最后添加 git repo: git@github.com:用户名/用户名.github.io.git branch: master 6. 安装部署使用的插件 npm install hexo-deployer-git -save// 7. 生成网站 该网站是要部署到github上的，因为github pages支持静态页面的解析，而Hexo 是用来生成 HTML，所以我们在部署网站前要先生成静态网站 hexo generate//可简写为hexo g 8. 进行自动部署网站 注意部署前需要重新生成网站, 每一次修改后都需要重新生成网站并进行部署， hexo deploy简写为hexo d 此处生成网站、网站部署操作可以一步进行在进行完博客编写更新之后，进行部署，hexo g -d 9. 网址输入个人博客ip地址检查 这里对我的脑子有点无语了，JustOnlyName.github.io仓库中还只放了一个README.md文件，以为进行完这些操作之后就能想https://localhost:4000/一样的界面，这里没有放除README.md外的文件，就只会出现README.md里的内容 上述错误进行完操作之后需要等待几分钟，这里需要时间上传，之后就能出现想要的界面，而JustOnlyName.github.io仓库中也出现上传的文件 补充1. 不清楚原因，用校园网制作该Hexo、github博客命令使用后的流程一切正常，但使用宿舍网制作了一次，http://localhost:4000/无法测试，删除仓库重新制作，用手机流量进行，卡到了另一个流程，初步推测应该是网络连接无法maintain的问题 2. 一般认为github是用来托管项目源码，其用来展示称为博客样式是使用的github的pages服务。其实每个github仓库都可以通过setting来用项目的index.html为入口展示项目。 例如： 我之前的仓库FirstStep 将none改为有项目展示入口index.html那一级 之后会出现Your site is published at https://....... 3. [hexo博客同步部署上传](https://www.jianshu.com/p/53f37196f6e7) 如何解决不同PC端的写作问题,大部分都是用git上传到空间，在不同PC写作的时候下载下来，网上搜了很久，无意中看到一篇文章，用NoodeJS的shelljs模块在部署后加载了hexo b命令，实现了同步部署和备份功能 参考文档：https://blog.csdn.net/u013162035/article/details/80718576https://juejin.im/post/598eeaff5188257d592e55bb]]></content>
      <tags>
        <tag>myblog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F12%2F20%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hello</category>
      </categories>
      <tags>
        <tag>Hello</tag>
      </tags>
  </entry>
</search>
